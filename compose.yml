services:
  searc-postgres:
    image: postgres:latest
    container_name: searc-db
    hostname: searc-db
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "${DB_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - searc-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Indexer Postgres    
  indexer-postgres:
    image: postgres:latest
    container_name: indexer-db
    hostname: indexer-db
    environment:
      POSTGRES_USER: ${INDEXER_DB_USER}
      POSTGRES_PASSWORD: ${INDEXER_DB_PASSWORD}
      POSTGRES_DB: ${INDEXER_DB_NAME}
    ports:
      - "${INDEXER_DB_PORT}:5432"
    volumes:
      - indexer_postgres_data:/var/lib/postgresql/data
    networks:
      - searc-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${INDEXER_DB_USER} -d ${INDEXER_DB_NAME}" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  searc-rabbitmq:
    image: rabbitmq:3-management
    container_name: "searc-rabbitmq"
    hostname: "searc-rabbitmq"
    ports:
      - "${RABBITMQ_PORT}:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - searc-network
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    ports:
      - "9090:9090"
    networks:
      - searc-network
    depends_on:
      - cadvisor
    deploy:
      placement:
        constraints:
          - node.role==manager
      restart_policy:
        condition: on-failure

  node-exporter:
    image: quay.io/prometheus/node-exporter:latest
    container_name: node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command: 
      - '--path.rootfs=/rootfs'
      - '--path.procfs=/host/proc' 
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    ports:
      - 9100:9100
    networks:
      - searc-network
    restart: always
    deploy:
      mode: global

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    volumes:
      - grafana_data:/var/lib/grafana
    ports:
      - "3000:3000"
    networks:
      - searc-network
    depends_on:
      - prometheus

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    restart: unless-stopped
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    ports:
      - "8080:8080"
    networks:
      - searc-network
    privileged: true
    devices:
      - /dev/kmsg:/dev/kmsg

  searc:
    build:
      context: .
      dockerfile: src/search-api/Dockerfile
    depends_on:
      searc-rabbitmq:
        condition: service_healthy
      searc-postgres:
        condition: service_healthy
    ports:
      - "${APP_PORT}:8080"
    environment:
      ASPNETCORE_ENVIRONMENT: "Production"
      APP_PORT: ${APP_PORT}
      RABBITMQ_HOST: searc-rabbitmq
      RABBITMQ_PORT: ${RABBITMQ_PORT}
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASS: ${RABBITMQ_PASS}
      DB_HOST: searc-db
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      SEQ_URL: http://seq:5341
      ZIPKIN_URL: http://zipkin:9411/api/v2/spans
    networks:
      - searc-network
    restart: unless-stopped

  structurizr-lite:
    image: structurizr/lite
    container_name: structurizr-lite
    ports:
      - "2000:8080"
    volumes:
      - ./structurizr:/usr/local/structurizr
    restart: unless-stopped

  seq:
    image: datalust/seq
    container_name: seq
    ports:
      - "5341:80"
    environment:
      - ACCEPT_EULA=Y
    networks:
      - searc-network

  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "9411:9411"
    restart: always
    networks:
      - searc-network

  flyway:
    image: flyway/flyway:latest
    command: >
      migrate
    volumes:
      - ./sql/search:/flyway/sql
    environment:
      FLYWAY_URL: jdbc:postgresql://searc-db:5432/${DB_NAME}
      FLYWAY_USER: ${DB_USER}
      FLYWAY_PASSWORD: ${DB_PASSWORD}
      FLYWAY_SCHEMAS: public
      FLYWAY_CONNECT_RETRIES: 50
    depends_on:
      searc-postgres:
        condition: service_healthy
    networks:
      - searc-network

  # Indexer Flyway      
  indexer-flyway:
    image: flyway/flyway:latest
    command: >
      migrate
    volumes:
      - ./sql/indexer:/flyway/sql
    environment:
      FLYWAY_URL: jdbc:postgresql://indexer-db:5432/${INDEXER_DB_NAME}
      FLYWAY_USER: ${INDEXER_DB_USER}
      FLYWAY_PASSWORD: ${INDEXER_DB_PASSWORD}
      FLYWAY_SCHEMAS: public
      FLYWAY_CONNECT_RETRIES: 50
    depends_on:
      indexer-postgres:
        condition: service_healthy
    networks:
      - searc-network

  # Indexer Service    
  indexer-service:
    build:
      context: .
      dockerfile: src/IndexerService/Dockerfile
    depends_on:
      indexer-postgres:
        condition: service_healthy
      indexer-flyway:
        condition: service_completed_successfully
      searc-rabbitmq:
        condition: service_healthy
    environment:
      ASPNETCORE_ENVIRONMENT: "Production"
      INDEXER_DB_HOST: indexer-db
      INDEXER_DB_PORT: 5432
      INDEXER_DB_NAME: ${INDEXER_DB_NAME}
      INDEXER_DB_USER: ${INDEXER_DB_USER}
      INDEXER_DB_PASSWORD: ${INDEXER_DB_PASSWORD}
      RABBITMQ_HOST: searc-rabbitmq
      RABBITMQ_PORT: ${RABBITMQ_PORT}
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASS: ${RABBITMQ_PASS}
      SEQ_URL: http://seq:5341
      ZIPKIN_URL: http://zipkin:9411/api/v2/spans
    networks:
      - searc-network
    restart: no
    deploy:
      replicas: 3

  # Frontend Service
  # frontend:
  #   build:
  #     context: .
  #     dockerfile: src/frontend/Dockerfile
  #   container_name: searc-frontend
  #   environment:
  #     - VITE_API_BASE_URL=http://searc:6969
  #   ports:
  #     - "8000:8000"
  #   depends_on:
  #     - searc
  #   networks:
  #     - searc-network
  #   restart: unless-stopped

  cleaner-service-a:
    build:
      context: .
      dockerfile: src/CleanerService/Dockerfile
    container_name: cleaner-service-a
    depends_on:
      searc-rabbitmq:
        condition: service_healthy
    environment:
      ASPNETCORE_ENVIRONMENT: "Production"
      APP_DATA_PATH: /data
      RABBITMQ_HOST: searc-rabbitmq
      RABBITMQ_PORT: ${RABBITMQ_PORT}
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASS: ${RABBITMQ_PASS}
      SEQ_URL: http://seq:5341
      ZIPKIN_URL: http://zipkin:9411/api/v2/spans
    networks:
      - searc-network
    volumes:
      - ./data/A:/data
    restart: no

  cleaner-service-b:
    build:
      context: .
      dockerfile: src/CleanerService/Dockerfile
    container_name: cleaner-service-b
    depends_on:
      searc-rabbitmq:
        condition: service_healthy
    environment:
      ASPNETCORE_ENVIRONMENT: "Production"
      APP_DATA_PATH: /data
      RABBITMQ_HOST: searc-rabbitmq
      RABBITMQ_PORT: ${RABBITMQ_PORT}
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASS: ${RABBITMQ_PASS}
      SEQ_URL: http://seq:5341
      ZIPKIN_URL: http://zipkin:9411/api/v2/spans
    networks:
      - searc-network
    volumes:
      - ./data/B:/data
    restart: no

  cleaner-service-c:
    build:
      context: .
      dockerfile: src/CleanerService/Dockerfile
    container_name: cleaner-service-c
    depends_on:
      searc-rabbitmq:
        condition: service_healthy
    environment:
      ASPNETCORE_ENVIRONMENT: "Production"
      APP_DATA_PATH: /data
      RABBITMQ_HOST: searc-rabbitmq
      RABBITMQ_PORT: ${RABBITMQ_PORT}
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASS: ${RABBITMQ_PASS}
      SEQ_URL: http://seq:5341
      ZIPKIN_URL: http://zipkin:9411/api/v2/spans
    networks:
      - searc-network
    volumes:
      - ./data/C:/data
    restart: no

networks:
  searc-network:
    driver: bridge

volumes:
  rabbitmq_data:
  postgres_data:
  indexer_postgres_data:
  prometheus_data:
  grafana_data: